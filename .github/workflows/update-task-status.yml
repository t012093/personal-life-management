name: Update Issue Status
on:
  issues:
    types:
      - reopened
      - opened
      - closed
      - assigned

jobs:
  update_labels:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Add labels based on issue status
        uses: actions/github-script@v6
        with:
          script: |
            const event = context.payload.action;
            const issue = context.payload.issue;
            
            async function updateLabels(addLabel, removeLabels) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: [addLabel]
              });
              
              for (const label of removeLabels) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: label
                  });
                } catch (e) {
                  // ラベルが存在しない場合は無視
                  if (e.status !== 404) throw e;
                }
              }
            }
            
            switch (event) {
              case 'opened':
                await updateLabels('backlog', ['in_progress', 'done']);
                break;
              case 'assigned':
              case 'reopened':
                await updateLabels('in_progress', ['backlog', 'done']);
                break;
              case 'closed':
                await updateLabels('done', ['in_progress', 'backlog']);
                break;
            }

  update_project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      repository-projects: write
    steps:
      - name: Move issue in project board
        uses: actions/github-script@v6
        with:
          script: |
            const event = context.payload.action;
            const issueNumber = context.payload.issue.number;
            
            // プロジェクトとカラムのIDを設定
            // NOTE: これらのIDは実際のプロジェクトボードに合わせて更新する必要があります
            const PROJECT_ID = 'PVT_kwHOBciMQs4AzKBN'; // Personal Life Management プロジェクト
            const COLUMNS = {
              BACKLOG: 'Backlog',
              IN_PROGRESS: 'In Progress',
              DONE: 'Done'
            };
            
            let targetColumn;
            switch (event) {
              case 'opened':
                targetColumn = COLUMNS.BACKLOG;
                break;
              case 'assigned':
              case 'reopened':
                targetColumn = COLUMNS.IN_PROGRESS;
                break;
              case 'closed':
                targetColumn = COLUMNS.DONE;
                break;
              default:
                return;
            }
            
            // GraphQLを使用してプロジェクトのカードを更新
            const query = `
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${PROJECT_ID}"
                  itemId: "${issueNumber}"
                  fieldId: "Status"
                  value: "${targetColumn}"
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            try {
              await github.graphql(query);
              console.log(`Issue #${issueNumber} moved to ${targetColumn}`);
            } catch (error) {
              console.error(`Failed to move issue: ${error}`);
            }
