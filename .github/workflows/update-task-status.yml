name: Update Task Status
on:
  project_card:
    types: [moved]

jobs:
  update-status:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Get column info
        id: get-column
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COLUMN_ID="${{ github.event.project_card.column_id }}"
          COLUMN_NAME=$(gh api graphql -f query='
            query($column_id: ID!) {
              node(id: $column_id) {
                ... on ProjectColumn {
                  name
                }
              }
            }
            ' -f column_id=$COLUMN_ID --jq '.data.node.name')
          echo "column_name=${COLUMN_NAME}" >> $GITHUB_OUTPUT

      - name: Update task status and labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COLUMN_NAME: ${{ steps.get-column.outputs.column_name }}
          ISSUE_URL: ${{ github.event.project_card.content_url }}
        run: |
          # メッセージテンプレートの定義
          in_progress_message="🌅 Daily Routine Started\n\n### Today's Goals\n- [ ] 朝6時起床\n- [ ] 朝のストレッチ (15分)\n- [ ] 朝食をしっかり摂る\n- [ ] 運動 (30分)\n- [ ] 3食の食事記録\n\n### メモ欄\n\n\n### Status Update\n- 開始時刻: $(date '+%Y-%m-%d %H:%M:%S')\n- 担当者: ${{ github.actor }}"
          
          review_message="🌙 Daily Review\n\n### チェックポイント\n1. 目標時刻に起床できましたか？\n   - 実際の起床時刻：\n   - 感想：\n\n2. 朝のストレッチは実施できましたか？\n   - 実施内容：\n   - 効果：\n\n3. 食事は計画通りでしたか？\n   - 朝食：\n   - 昼食：\n   - 夕食：\n\n4. 運動は達成できましたか？\n   - 運動内容：\n   - 時間：\n\n### 明日への改善点\n\n\n### Status Update\n- レビュー時刻: $(date '+%Y-%m-%d %H:%M:%S')\n- 記録者: ${{ github.actor }}"
          
          done_message="✨ Daily Achievement Report\n\n### 達成状況\n1. 朝のルーティン\n   - 起床時刻：\n   - ストレッチ：\n   - 朝食：\n\n2. 運動記録\n   - 内容：\n   - 時間：\n   - 感想：\n\n3. 食事記録\n   - 朝食：\n   - 昼食：\n   - 夕食：\n   - カロリー目標：\n\n### 今日のハイライト\n\n\n### Status Update\n- 完了時刻: $(date '+%Y-%m-%d %H:%M:%S')\n- 記録者: ${{ github.actor }}\n\n明日も頑張りましょう！💪"
          
          # 状態に応じたメッセージとラベルの更新
          if [ "$COLUMN_NAME" = "In Progress" ]; then
            gh issue comment "$ISSUE_URL" --body "$in_progress_message"
            gh issue edit "$ISSUE_URL" --add-label "in_progress" --remove-label "review,completed"
          elif [ "$COLUMN_NAME" = "Review" ]; then
            gh issue comment "$ISSUE_URL" --body "$review_message"
            gh issue edit "$ISSUE_URL" --add-label "review" --remove-label "in_progress,completed"
          elif [ "$COLUMN_NAME" = "Done" ]; then
            gh issue comment "$ISSUE_URL" --body "$done_message"
            gh issue edit "$ISSUE_URL" --add-label "completed" --remove-label "in_progress,review"
          fi

  notify-parent:
    needs: update-status
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Get column info
        id: get-column
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COLUMN_ID="${{ github.event.project_card.column_id }}"
          COLUMN_NAME=$(gh api graphql -f query='
            query($column_id: ID!) {
              node(id: $column_id) {
                ... on ProjectColumn {
                  name
                }
              }
            }
            ' -f column_id=$COLUMN_ID --jq '.data.node.name')
          echo "column_name=${COLUMN_NAME}" >> $GITHUB_OUTPUT

      - name: Update Parent Epic
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_URL: ${{ github.event.project_card.content_url }}
          COLUMN_NAME: ${{ steps.get-column.outputs.column_name }}
        run: |
          # イシュータイトルから親タスクの番号を抽出
          ISSUE_TITLE=$(gh issue view "$ISSUE_URL" --json title -q .title)
          if [[ $ISSUE_TITLE =~ \[#([0-9]+)\] ]]; then
            PARENT_ID=${BASH_REMATCH[1]}
            
            # 親タスクの更新メッセージを作成
            update_message="📋 サブタスク進捗報告\n\n### 更新内容\n- タスク：$ISSUE_TITLE\n- 新しい状態：$COLUMN_NAME\n\n### ステータス詳細\n- 更新日時：$(date '+%Y-%m-%d %H:%M:%S')\n- 更新者：${{ github.actor }}\n\n### タスク概要\n$(gh issue view "$ISSUE_URL" --json body -q .body | head -n 3)"
            
            # 親タスクにコメントを追加
            gh issue comment "$PARENT_ID" --body "$update_message"
            
            # 進捗状況の計算と更新
            TOTAL_SUBTASKS=$(gh issue list --search "[#$PARENT_ID]" --json number -q '. | length')
            COMPLETED_SUBTASKS=$(gh issue list --search "[#$PARENT_ID] is:closed" --json number -q '. | length')
            PROGRESS=$((COMPLETED_SUBTASKS * 100 / TOTAL_SUBTASKS))
            
            progress_message="### 現在の進捗状況\n- 全体タスク数：$TOTAL_SUBTASKS\n- 完了タスク数：$COMPLETED_SUBTASKS\n- 進捗率：${PROGRESS}%"
            gh issue comment "$PARENT_ID" --body "$progress_message"
          fi
