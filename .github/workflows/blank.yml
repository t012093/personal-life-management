name: Daily Progress Report
on:
  schedule:
    - cron: '0 21 * * *'  # 毎日21:00 UTC (翌日6:00 JST)
  workflow_dispatch:

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Generate Daily Report
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TODAY=$(date '+%Y-%m-%d')
          YESTERDAY=$(date -d "yesterday" '+%Y-%m-%d')
          
          echo "日次レポートの生成を開始: $TODAY"
          
          # 今日のルーティンタスクの取得
          TASKS=$(gh issue list --label routine,daily --search "created:$TODAY" --json number,title,body,comments,state,labels -q '.[]')
          
          if [ -z "$TASKS" ]; then
            echo "本日のタスクが見つかりません。新しいタスクを作成します。"
            
            # 新しい日次タスクの作成
            TASK_TITLE="[Daily] $TODAY 朝活ルーティン"
            gh issue create --title "$TASK_TITLE" --label "routine,daily" --body "## 本日の目標

- [ ] 朝6時起床
- [ ] モーニングストレッチ（15分）
- [ ] 健康的な朝食
- [ ] 運動（30分）
- [ ] 食事記録

## スケジュール

06:00 - 起床
06:15 - モーニングルーティン
07:00 - 運動
08:00 - 朝食と1日の計画

## メモ"
            exit 0
          fi
          
          # タスクごとの進捗を分析
          echo "$TASKS" | jq -c '.[]' | while read -r task; do
            TASK_NUM=$(echo "$task" | jq -r '.number')
            
            # メトリクスの抽出
            WAKEUP_TIME=$(echo "$task" | jq -r '.comments[] | select(contains("実際の起床時刻")) | capture("実際の起床時刻：(?<time>[0-9]{1,2}:[0-9]{2})").time // "未記録"' | tail -n1)
            EXERCISE_TIME=$(echo "$task" | jq -r '.comments[] | select(contains("運動時間")) | capture("時間：(?<time>[0-9]+)分").time // "0"' | tail -n1)
            
            # タスクの状態確認
            STATUS=$(echo "$task" | jq -r '.state')
            IS_IN_PROGRESS=$(echo "$task" | jq -r '.labels[] | select(.name == "in_progress") | .name' | wc -l)
            
            # 進捗レポートの生成
            REPORT=""
            if [ "$STATUS" = "closed" ]; then
              REPORT=$(cat <<-EOF
## 📋 デイリータスク進捗レポート
**日付:** $TODAY

### ✅ タスク完了
おめでとうございます！本日のタスクを完了しました。
EOF
)
            elif [ "$IS_IN_PROGRESS" -gt 0 ]; then
              REPORT=$(cat <<-EOF
## 📋 デイリータスク進捗レポート
**日付:** $TODAY

### 🏃 タスク実行中
引き続き、目標達成に向けて頑張りましょう。
EOF
)
            else
              REPORT=$(cat <<-EOF
## 📋 デイリータスク進捗レポート
**日付:** $TODAY

### ⏰ タスク開始前
早めにタスクを開始することをお勧めします。
EOF
)
            fi
            
            # メトリクス情報の追加
            REPORT="$REPORT

### 📊 今日のメトリクス
- 起床時刻: $WAKEUP_TIME"
            if [ "$EXERCISE_TIME" != "0" ]; then
              REPORT="$REPORT
- 運動時間: ${EXERCISE_TIME}分"
            fi
            
            # タスクリストの完了状況を確認
            CHECKLIST=$(echo "$task" | jq -r '.body' | grep -E '^\s*- \[([ x])\]')
            TOTAL_TASKS=$(echo "$CHECKLIST" | wc -l)
            COMPLETED_TASKS=$(echo "$CHECKLIST" | grep -c '\[x\]')
            
            if [ "$TOTAL_TASKS" -gt 0 ]; then
              COMPLETION_RATE=$((COMPLETED_TASKS * 100 / TOTAL_TASKS))
              REPORT="$REPORT

### ✓ タスク達成状況
- 完了タスク: $COMPLETED_TASKS / $TOTAL_TASKS
- 達成率: ${COMPLETION_RATE}%"
            fi
            
            # アドバイスの生成
            REPORT="$REPORT

### 💡 アドバイス"
            if [ "$WAKEUP_TIME" \> "06:30" ]; then
              REPORT="$REPORT
- 目標の起床時刻（6:00）より遅れています。就寝時間を早めることを検討しましょう。"
            fi
            
            if [ "$EXERCISE_TIME" = "0" ]; then
              REPORT="$REPORT
- まだ運動が記録されていません。短時間でも運動を取り入れましょう。"
            elif [ "$EXERCISE_TIME" -lt 30 ]; then
              REPORT="$REPORT
- 運動時間が目標（30分）に達していません。可能であれば時間を増やしましょう。"
            fi
            
            # レポートの投稿
            gh issue comment "$TASK_NUM" --body "$REPORT"
          done

      - name: Update Epic Progress
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Epicタスクの更新
          EPICS=$(gh issue list --label epic --state open --json number,title -q '.[]')
          
          echo "$EPICS" | jq -c '.[]' | while read -r epic; do
            EPIC_NUM=$(echo "$epic" | jq -r '.number')
            
            # サブタスクの進捗計算
            TOTAL=$(gh issue list --search "[#$EPIC_NUM]" --json number -q '. | length')
            COMPLETED=$(gh issue list --search "[#$EPIC_NUM] is:closed" --json number -q '. | length')
            IN_PROGRESS=$(gh issue list --search "[#$EPIC_NUM] label:in_progress" --json number -q '. | length')
            
            PROGRESS=$((COMPLETED * 100 / TOTAL))
            
            # 進捗レポートの生成
            SUMMARY=$(cat <<-EOF
## 📈 Epicの進捗状況 ($TODAY)

### 📊 現在の状態
- 全体タスク数: $TOTAL
- 完了: $COMPLETED
- 進行中: $IN_PROGRESS
- 進捗率: ${PROGRESS}%

EOF
)
            
            if [ $PROGRESS -eq 100 ]; then
              SUMMARY="$SUMMARY🎉 **おめでとうございます！** 全てのタスクが完了しました。"
            elif [ $PROGRESS -ge 80 ]; then
              SUMMARY="$SUMMARY👍 目標達成まであと少しです！最後まで頑張りましょう。"
            elif [ $PROGRESS -ge 50 ]; then
              SUMMARY="$SUMMARY💪 順調に進んでいます。このペースを維持しましょう。"
            else
              SUMMARY="$SUMMARY🌱 一歩一歩、確実に前進していきましょう。"
            fi
            
            # レポートの投稿
            gh issue comment "$EPIC_NUM" --body "$SUMMARY"
          done
